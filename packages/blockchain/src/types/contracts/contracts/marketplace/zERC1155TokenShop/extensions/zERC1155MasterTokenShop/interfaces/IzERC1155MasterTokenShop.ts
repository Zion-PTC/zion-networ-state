/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IzERC1155MasterTokenShopInterface extends utils.Interface {
  functions: {
    "buyTokens(bytes)": FunctionFragment;
    "capitalOfAt(address,uint256)": FunctionFragment;
    "dividend()": FunctionFragment;
    "getCurrentDividendId()": FunctionFragment;
    "setShopStatus(uint256)": FunctionFragment;
    "totalCapital()": FunctionFragment;
    "totalCapitalAt(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTokens"
      | "capitalOfAt"
      | "dividend"
      | "getCurrentDividendId"
      | "setShopStatus"
      | "totalCapital"
      | "totalCapitalAt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "capitalOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dividend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentDividendId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setShopStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCapital",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCapitalAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "capitalOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dividend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDividendId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShopStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCapital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCapitalAt",
    data: BytesLike
  ): Result;

  events: {
    "Dividend(uint256)": EventFragment;
    "SnapshotTokenSet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SnapshotTokenSet"): EventFragment;
}

export interface DividendEventObject {
  id: BigNumber;
}
export type DividendEvent = TypedEvent<[BigNumber], DividendEventObject>;

export type DividendEventFilter = TypedEventFilter<DividendEvent>;

export interface SnapshotTokenSetEventObject {
  ierc1155master: string;
  idUsedAsShares: BigNumber;
}
export type SnapshotTokenSetEvent = TypedEvent<
  [string, BigNumber],
  SnapshotTokenSetEventObject
>;

export type SnapshotTokenSetEventFilter =
  TypedEventFilter<SnapshotTokenSetEvent>;

export interface IzERC1155MasterTokenShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IzERC1155MasterTokenShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTokens(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    capitalOfAt(
      account: PromiseOrValue<string>,
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dividend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentDividendId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setShopStatus(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCapital(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capital: BigNumber }>;

    totalCapitalAt(
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  buyTokens(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  capitalOfAt(
    account: PromiseOrValue<string>,
    dividendId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dividend(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentDividendId(overrides?: CallOverrides): Promise<BigNumber>;

  setShopStatus(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCapital(overrides?: CallOverrides): Promise<BigNumber>;

  totalCapitalAt(
    dividendId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    buyTokens(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    capitalOfAt(
      account: PromiseOrValue<string>,
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividend(overrides?: CallOverrides): Promise<void>;

    getCurrentDividendId(overrides?: CallOverrides): Promise<BigNumber>;

    setShopStatus(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCapital(overrides?: CallOverrides): Promise<BigNumber>;

    totalCapitalAt(
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Dividend(uint256)"(id?: null): DividendEventFilter;
    Dividend(id?: null): DividendEventFilter;

    "SnapshotTokenSet(address,uint256)"(
      ierc1155master?: null,
      idUsedAsShares?: null
    ): SnapshotTokenSetEventFilter;
    SnapshotTokenSet(
      ierc1155master?: null,
      idUsedAsShares?: null
    ): SnapshotTokenSetEventFilter;
  };

  estimateGas: {
    buyTokens(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    capitalOfAt(
      account: PromiseOrValue<string>,
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentDividendId(overrides?: CallOverrides): Promise<BigNumber>;

    setShopStatus(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCapital(overrides?: CallOverrides): Promise<BigNumber>;

    totalCapitalAt(
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokens(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    capitalOfAt(
      account: PromiseOrValue<string>,
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dividend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentDividendId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setShopStatus(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCapital(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCapitalAt(
      dividendId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
