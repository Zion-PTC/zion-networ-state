# Git

This package is meant to provide tools for the creation of a
dashboard which will inclued workflows from the ground up:
starting from the folders in which projects are built,
leveraging git issues, branches and merging, we will provide
tools to manage any kind of project.

# Contents

- [Introduction](#introduction)
  - [Rationale](#rationale)
- [Features](#features)
  - [Monorepo Dashboard](#monorepo-dashboard)
  - [Github Issues to Roadmap](#github-issues-to-roadmap-tasks)
- [Ideas](#ideas)
  - [Social=>Github=>codebase](#social--github--codebase)

# Introduction

This repos represents a library of classes and methods which
tackle the creation, management and complexity of projects
by leveraging the power of Git version control.

## Rationale

To accomplish a project one needs to create a list of
objectives, which, once completed, shall lead to the desired
goal. This type of relations can be represented by a direct
acyclic graph (or DAG).
On the other hand a git data structure is more of a tree,
which is anyway a sub-group of the DAG graphs (all Trees
structures are DAGs but not all DAGs are Trees). Actually
forks and remergin of those into a repo which is now child
of both, a folder which is within the original tree
structure, and the merge of the new head, can be considered
as a DAG aswell.

In a similar way, issues are a DAG aswell. An issue can have
other child issues, and it can have multiple issues in which
it is tracked (hence can have multiple parents, therefore
creating a DAG data structure).

By adding some properties to the nodes of the github issues
trees we can extend their capabilities and have them match
needs require by nodes creating a DAG gannt chart for tasks.

There are already build tools which transform github issues
in Gannt charts. We need to extend this capabilities and
connect that to Roadmaps objects.

# Features

## Monorepo Dashboard

The monorepo dashboard is meant to be a tool which provides
an overlook and some useful integrations.

## Github issues to Roadmap tasks.

Github issues if well used can represent the amount of work
that the is to be done on a certain project.
Git works with folder structure.
Any project requires the creation of documents.
Any project is suited to be using a system like git to
handle versions of the data source.
It comes with a downside which is file duplications.

> Audio projects for instance are not a good target project
> to be managed by a git system.

That's why this solution is not adopted, while other ways
provide similar solutions, for example osx Time Machine, or
even DropBox. They anyway lack the ability of creating
branches, the tree of filesystem snapshots provided by those
solutions is a linear type, meaning that you cannot crate
multiple variations.

> Probably a system based on IPFS couls solve the file
> duplication problem as it the files reference as CID would
> not be duplicated, for example
>
> 1. [Pando]('https://github.com/pandonetwork/pando')
> 2. [Radible]('radicle.xyz')

# Ideas

## Social => Github => CodeBase

Build a tool which lets seamlessy post an issue/bug of an
application just like you would make a post on facebook. The
issue is a smart contract itself so it can directly collect
money which maybe needed to fund the operational activity.

- a bug is spotted
- a user posts the issue
- approve report
- the post create an issue on github
- approve issue creation
- create issue on github
- validate the post of the user

now other users can put comments on the post

- a user posts a comment on the isse
- the comment is mirrored on github in the application

# References

Some ideas from which take inspiration for possible features.

[Roadmap Space]('https://roadmap.space/')
