{
  "snippet": [
    "import styled from \"styled-components\";",
    "",
    "enum layouts {",
    "  main = \"main\",",
    "}",
    "enum styles {",
    "  defaultStyle = \"defaultStyle\",",
    "}",
    "type layoutTypes = keyof typeof layouts;",
    "type styleTypes = keyof typeof styles;",
    "",
    "export interface ${TM_FILENAME_BASE}Props",
    "  extends BaseNoizProps<layoutTypes, styleTypes> {}",
    "",
    "export class ${TM_FILENAME_BASE}Props extends BaseNoizProps<",
    "  layoutTypes,",
    "  styleTypes",
    "> {}",
    "",
    "export interface ${TM_FILENAME_BASE}State",
    "  extends BaseNoizState<${TM_FILENAME_BASE}Props> {}",
    "",
    "export class ${TM_FILENAME_BASE}State extends BaseNoizState<${TM_FILENAME_BASE}Props> {}",
    "",
    "export interface ${TM_FILENAME_BASE}",
    "  extends BaseNoiz<",
    "    layoutTypes,",
    "    styleTypes,",
    "    ${TM_FILENAME_BASE}Props,",
    "    ${TM_FILENAME_BASE}State",
    "  > {}",
    "",
    "export class ${TM_FILENAME_BASE} extends BaseNoiz<",
    "  layoutTypes,",
    "  styleTypes,",
    "  ${TM_FILENAME_BASE}Props,",
    "  ${TM_FILENAME_BASE}State",
    "> {",
    "  static defaultProps: ${TM_FILENAME_BASE}Props = {",
    "    layout: layouts.main,",
    "    style: styles.defaultStyle,",
    "  };",
    "constructor(props: ${TM_FILENAME_BASE}Props) {",
    "  super(props);",
    "  let state = new ${TM_FILENAME_BASE}State();",
    "  state.layout = () => <></>;",
    "  state.style = styled(this.Html)``;",
    "  this.state = state;",
    "}",
    "  main = (props: ${TM_FILENAME_BASE}Props) => {",
    "    return <h1>{props.children}</h1>;",
    "  };",
    "  layouts = [",
    "    new this.Layout({",
    "      name: layouts.main,",
    "      component: this.main,",
    "    }),",
    "  ];",
    "  defaultStyle = styled(this.Html)``;",
    "  styledlayouts = [",
    "    new this.Style({",
    "      name: styles.defaultStyle,",
    "      style: this.defaultStyle,",
    "    }),",
    "  ];",
    "  render() {",
    "    let Element = this.StyledHtml;",
    "    return <Element {...this.props}></Element>;",
    "  }",
    "  didMount() {}",
    "  didUpdate = (",
    "    prevPros: ${TM_FILENAME_BASE}Props,",
    "    prevState: ${TM_FILENAME_BASE}State,",
    "    snapshot: any",
    "  ) => {};",
    "}"
  ]
}
